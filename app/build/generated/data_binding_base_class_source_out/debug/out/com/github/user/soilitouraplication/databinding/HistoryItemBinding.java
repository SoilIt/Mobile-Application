// Generated by view binder compiler. Do not edit!
package com.github.user.soilitouraplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.user.soilitouraplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HistoryItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView tvDateCreated;

  @NonNull
  public final TextView tvMoisture;

  @NonNull
  public final TextView tvSoil;

  @NonNull
  public final TextView tvSoilCondition;

  @NonNull
  public final TextView tvTemperature;

  private HistoryItemBinding(@NonNull ConstraintLayout rootView, @NonNull TextView tvDateCreated,
      @NonNull TextView tvMoisture, @NonNull TextView tvSoil, @NonNull TextView tvSoilCondition,
      @NonNull TextView tvTemperature) {
    this.rootView = rootView;
    this.tvDateCreated = tvDateCreated;
    this.tvMoisture = tvMoisture;
    this.tvSoil = tvSoil;
    this.tvSoilCondition = tvSoilCondition;
    this.tvTemperature = tvTemperature;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HistoryItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HistoryItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.history_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HistoryItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.tv_date_created;
      TextView tvDateCreated = ViewBindings.findChildViewById(rootView, id);
      if (tvDateCreated == null) {
        break missingId;
      }

      id = R.id.tv_moisture;
      TextView tvMoisture = ViewBindings.findChildViewById(rootView, id);
      if (tvMoisture == null) {
        break missingId;
      }

      id = R.id.tv_soil;
      TextView tvSoil = ViewBindings.findChildViewById(rootView, id);
      if (tvSoil == null) {
        break missingId;
      }

      id = R.id.tv_soil_condition;
      TextView tvSoilCondition = ViewBindings.findChildViewById(rootView, id);
      if (tvSoilCondition == null) {
        break missingId;
      }

      id = R.id.tv_temperature;
      TextView tvTemperature = ViewBindings.findChildViewById(rootView, id);
      if (tvTemperature == null) {
        break missingId;
      }

      return new HistoryItemBinding((ConstraintLayout) rootView, tvDateCreated, tvMoisture, tvSoil,
          tvSoilCondition, tvTemperature);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
